services:
  postgres:
    image: postgres:latest
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./init.sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - ${DB_PORT}:${DB_PORT}
    expose:
      - ${DB_PORT}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  migrate:
    image: migrate/migrate
    volumes:
        - ./migrations:/migrations
    environment:
      - GREENLIGHT_DB_DSN=${GREENLIGHT_DB_DSN}
    command: ["-path", "/migrations", "-database",  "${GREENLIGHT_DB_DSN}", "up"]
    depends_on:
      postgres:
        condition: service_healthy

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080

  api:
    build:
      context: .
      dockerfile: ./cmd/api/Dockerfile
    ports:
      - ${APP_PORT}:${APP_PORT}
    command: ./cmd/api
    environment:
      - APP_PORT=${APP_PORT}
      - GREENLIGHT_DB_DSN=${GREENLIGHT_DB_DSN}
      - ENV=${ENV}
      - PGHOST=postgres
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_SENDER=${SMTP_SENDER}
    depends_on:
      postgres:
        condition: service_healthy
    develop:
      watch:
        - action: rebuild
          path: ./cmd

        - action: rebuild
          path: ./internal

